---

- name: Set test facts
  set_fact:
    auth_source: auto
    availability_set_blob: "avbs{{ resource_group | hash('md5') | truncate(7, True, '') }}"
    availability_set: "{{ resource_group }}-avs"
    storage_account: "{{ resource_group | hash('md5') | truncate(24, True, '') }}"
    vnet: "{{ resource_group }}-vnet"
    subnet: "{{ resource_group }}-snet"
    nsg: "{{ resource_group }}-nsg"
    pip: "{{ resource_group }}-pip"
    vm_size: Standard_A0
    admin_user: adminuser
    password: Password123!
    storage_type: Standard_LRS
    started: no
    os_type: Linux
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: 16.04-LTS
      version: latest
    image_paid:
      publisher: f5-networks
      offer: f5-big-ip-best
      sku: f5-bigip-virtual-edition-200m-best-hourly
      version: latest
    plan_paid:
      name: f5-bigip-virtual-edition-200m-best-hourly
      product: f5-big-ip-best
      publisher: f5-networks
    target_os_disk_size: 123
    target_os_disk_size_increased: 321
    vm_name: 
      default: vm-default
      single_nic: vm-single-nic
      dual_nic:
        name: vm-dual-nic
        nic_list:
          - vm-dual-nic-01
          - vm-dual-nic-02
      no_pip: vm-no-pip
      managed_disk: vm-managed-disk
      os_disk_size: vm-os-disk-size
      accept_terms: vm-accept-terms

- name: Delete virtual machines
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vms }}"
    state: absent
    vm_size: "{{ vm_size }}"
  loop:
    - "{{ vm_name.single_nic }}"
    - "{{ vm_name.no_pip }}"
    - "{{ vm_name.managed_disk }}"
    - "{{ vm_name.os_disk_size }}"
    - "{{ vm_name.accept_terms }}"
  loop_control:
    loop_var: vms
  register: output

- name: Create virtual network
  azure_rm_virtualnetwork:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vnet }}"
    address_prefixes: "10.10.0.0/16"

- name: Add subnet
  azure_rm_subnet:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ subnet }}"
    address_prefix: "10.10.0.0/24"
    virtual_network: "{{ vnet }}"

- name: Create security group
  azure_rm_securitygroup:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ nsg }}"
    purge_rules: yes
    rules:
      - name: ALLOW_SSH
        protocol: Tcp
        destination_port_range: 22
        access: Allow
        priority: 100
        direction: Inbound
      - name: ALLOW_HTTP
        protocol: Tcp
        destination_port_range: 80
        access: Allow
        priority: 110
        direction: Inbound

- name: Create public ip
  azure_rm_publicipaddress:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    allocation_method: Static
    name: "{{ pip }}"

- name: Create storage account
  azure_rm_storageaccount:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account }}"
    account_type: "{{ storage_type }}"

- name: Create an availability set
  azure_rm_availabilityset:
    auth_source: "{{ auth_source }}"
    name: "{{ availability_set }}"
    resource_group: "{{ resource_group }}"
    platform_update_domain_count: 5
    platform_fault_domain_count: 2
    sku: Aligned

- name: Create an availability set for blob storage
  azure_rm_availabilityset:
    auth_source: "{{ auth_source }}"
    name: "{{ availability_set_blob }}"
    resource_group: "{{ resource_group }}"

- name: Create NIC for single nic VM
  azure_rm_networkinterface:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    virtual_network: "{{ vnet }}"
    subnet: "{{ subnet }}"
    public_ip_name: "{{ pip }}"
    security_group: "{{ nsg }}"

- name: Create virtual machine with a single NIC
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    short_hostname: "{{ vm_name.single_nic }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set_blob }}"
    network_interface_names: "{{ vm_name.single_nic }}"
    storage_account: "{{ storage_account }}"
    storage_container: "{{ vm_name.single_nic }}"
    storage_blob: "{{ vm_name.single_nic }}.vhd"
    os_type: "{{ os_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"
    custom_data: |
      #!/bin/sh
      echo "custom_data was executed" > /tmp/custom_data.txt

- assert:
    that:
      - azure_vm.properties.availabilitySet.id

- add_host:
    name: new_azure_vm
    ansible_host: '{{ output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}'
    ansible_connection: paramiko  # not guaranteed to have sshpass...
    ansible_user: "{{ admin_user }}"
    ansible_password: "{{ password }}"
    ansible_host_key_checking: false

- name: wait for SSH port to be open
  wait_for:
    host: '{{ hostvars["new_azure_vm"].ansible_host }}'
    port: 22
    timeout: 60
    state: started

- block:
  # TODO: figure out how to make this work under ansible-test with the coverage injector
  #- name: wait for host to answer on SSH
  #  delegate_to: new_azure_vm
  #  wait_for_connection:
  - name: get content from custom_data script
    raw: cat /tmp/custom_data.txt
    register: custom_data_content

  - name: assert contents
    assert:
        that: custom_data_content.stdout | regex_search('custom_data was executed')
  delegate_to: new_azure_vm

  # TODO: figure out how to make this work under ansible-test with the coverage injector
  #- name: wait for file/content created by custom_data script
  #  delegate_to: new_azure_vm
  #  vars:
  #    ansible_python_interpreter: python
  #  wait_for:
  #    path: /tmp/custom_data.txt
  #    search_regex: ^custom_data was executed$
  #    timeout: 20

- name: Restart the virtual machine
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    restarted: yes
    vm_size: "{{ vm_size }}"
  register: output

- assert:
    that:
      - "azure_vm.powerstate in ['starting', 'running']"
      - output.changed

- name: Deallocate the virtual machine
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    allocated: no 
    vm_size: "{{ vm_size }}"
  register: output

- assert:
    that:
      - azure_vm.powerstate == 'deallocated'
      - output.changed

- name: Start the virtual machine
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    vm_size: "{{ vm_size }}"
  register: output

- assert:
    that:
      - "azure_vm.powerstate in ['starting', 'running']"
      - output.changed

- name: Should be idempotent with a single NIC
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    short_hostname: "{{ vm_name.single_nic }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set_blob }}"
    network_interface_names: "{{ vm_name.single_nic }}"
    storage_account: "{{ storage_account }}"
    storage_container: "{{ vm_name.single_nic }}"
    storage_blob: "{{ vm_name.single_nic }}.vhd"
    os_type: "{{ os_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that: not output.changed

- name: Delete VM
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
    state: absent
    vm_size: "{{ vm_size }}"
  register: output

- name: NIC should be gone
  azure_rm_networkinterface_facts:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.single_nic }}"
  register: output

- assert:
    that: azure_networkinterfaces | length == 0

- name: PIP should be gone
  azure_rm_publicipaddress_facts:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ pip }}"
  register: output

- assert:
    that: azure_publicipaddresses | length == 0

- name: Delete storage account
  azure_rm_storageaccount:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account }}"
    state: absent

- name: Create virtual machine without public ip address
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.no_pip }}"
    short_hostname: "{{ vm_name.no_pip }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set_blob }}"
    public_ip_allocation_method: Disabled
    os_type: "{{ os_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that:
      - not 'publicIPAddress' in output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties

- name: Delete VM with no public ip
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.no_pip }}"
    state: absent
    vm_size: "{{ vm_size }}"

- name: Create virtual machine with managed disk
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.managed_disk }}"
    short_hostname: "{{ vm_name.managed_disk }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that:
      - azure_vm.properties.availabilitySet.id

- name: Create virtual machine with managed disk should be idempotent
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.managed_disk }}"
    short_hostname: "{{ vm_name.managed_disk }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that: not output.changed

- name: Delete VM with managed disk
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.managed_disk }}"
    state: absent
    vm_size: "{{ vm_size }}"

- name: Create NICs for dual nic VM
  azure_rm_networkinterface:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ item }}"
    virtual_network: "{{ vnet }}"
    subnet: "{{ subnet }}"
    security_group: "{{ nsg }}"
  loop: "{{ vm_name.dual_nic.nic_list }}"

- name: Create virtual machine with two NICs
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.dual_nic.name }}"
    short_hostname: "{{ vm_name.dual_nic.name }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    network_interface_names: "{{ vm_name.dual_nic.nic_list }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    os_type: "{{ os_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that:
      - azure_vm.properties.availabilitySet.id

- name: Should be idempotent with a dual NICs
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.dual_nic.name }}"
    short_hostname: "{{ vm_name.dual_nic.name }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    network_interface_names: "{{ vm_name.dual_nic.nic_list }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    os_type: "{{ os_type }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that: not output.changed

- name: Delete dual NIC VM
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.dual_nic.name }}"
    state: absent
    vm_size: "{{ vm_size }}"
  register: output

# TODO: Until we have a module to create/delete images this is the best tests
# I can do
- name: assert error thrown with invalid image dict
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.default }}"
    state: present
    image:
      offer: UbuntuServer
  register: fail_invalid_image_dict
  failed_when: 'fail_invalid_image_dict.msg != "parameter error: expecting image to contain [publisher, offer, sku, version] or [name, resource_group]"'

- name: assert error thrown with invalid image type
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.default }}"
    state: present
    image:
    - testing
  register: fail_invalid_image_type
  failed_when: 'fail_invalid_image_type.msg != "parameter error: expecting image to be a string or dict not list"'

- name: assert error finding missing custom image
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.default }}"
    state: present
    image: invalid-image
  register: fail_missing_custom_image
  failed_when: fail_missing_custom_image.msg != "Error could not find image with name invalid-image"

- name: assert error finding missing custom image (dict style)
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.default }}"
    state: present
    image:
      name: invalid-image
  register: fail_missing_custom_image_dict
  failed_when: fail_missing_custom_image_dict.msg != "Error could not find image with name invalid-image"

- name: Create virtual machine with specific OS disk size
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.os_disk_size }}"
    short_hostname: "{{ vm_name.os_disk_size }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    os_type: "{{ os_type }}"
    os_disk_size: "{{ target_os_disk_size }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that: "azure_vm.properties.storageProfile.osDisk.diskSizeGB == target_os_disk_size"

- name: Should be idempotent with specified OS disk size
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.os_disk_size }}"
    short_hostname: "{{ vm_name.os_disk_size }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    os_type: "{{ os_type }}"
    os_disk_size: "{{ target_os_disk_size }}"
    image: "{{ image }}"
    vm_size: "{{ vm_size }}"

- assert:
    that: not output.changed

- name: Delete OS disk size VM
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.os_disk_size }}"
    state: absent
    vm_size: "{{ vm_size }}"

- name: Create virtual machine with image and plan which requires acceptance of terms
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.accept_terms }}"
    short_hostname: "{{ vm_name.accept_terms }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    os_type: "{{ os_type }}"
    image: "{{ image_paid }}"
    plan: "{{ plan_paid }}"
    accept_terms: true
    vm_size: "{{ vm_size }}"

- assert:
    that:
      - azure_vm.properties.availabilitySet.id

- name: Should be idempotent with image and plan which requires acceptance of terms
  register: output
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.accept_terms }}"
    short_hostname: "{{ vm_name.accept_terms }}"
    admin_username: "{{ admin_user }}"
    admin_password: "{{ password }}"
    availability_set: "{{ availability_set }}"
    public_ip_allocation_method: Disabled
    managed_disk_type: "{{ storage_type }}"
    os_type: "{{ os_type }}"
    image: "{{ image_paid }}"
    plan: "{{ plan_paid }}"
    accept_terms: true
    vm_size: "{{ vm_size }}"

- assert:
    that: not output.changed

- name: Delete VM for accept terms VM
  azure_rm_virtualmachine:
    auth_source: "{{ auth_source }}"
    resource_group: "{{ resource_group }}"
    name: "{{ vm_name.accept_terms }}"
    state: absent
    vm_size: "{{ vm_size }}"
  register: output
